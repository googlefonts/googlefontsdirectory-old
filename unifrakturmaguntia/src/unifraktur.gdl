// Graphite description language file for UniFraktur fonts, Version 2010-11-24
//
// Copyright (c) 2010 j. 'mach' wust
// This Font Software is licensed under the SIL Open Font License, Version 1.1.
// This license is also available with a FAQ at: http://scripts.sil.org/OFL

#define ps postscript
#define LG_USENG 0x0409

environment { MUnits = 1000; }


table(feature)
  autolongs {
    id=200;
    name.LG_USENG = string("Automatic long s");
    default = false;
  }
  autoroundr {
    id=201;
    name.LG_USENG = string("Automatic round r");
    default = false;
  }
  rareligatures {
    id=202;
    name.LG_USENG = string("Rare ligatures");
    default = false;
  }
endtable;

table(glyph)
  A = (postscript("A"));
  B = (postscript("B"));
  C = (postscript("C"));
  D = (postscript("D"));
  E = (postscript("E"));
  F = (postscript("F"));
  G = (postscript("G"));
  H = (postscript("H"));
  I = (postscript("I"));
  J = (postscript("J"));
  K = (postscript("K"));
  L = (postscript("L"));
  M = (postscript("M"));
  N = (postscript("N"));
  O = (postscript("O"));
  P = (postscript("P"));
  Q = (postscript("Q"));
  R = (postscript("R"));
  S = (postscript("S"));
  T = (postscript("T"));
  U = (postscript("U"));
  V = (postscript("V"));
  W = (postscript("W"));
  X = (postscript("X"));
  Y = (postscript("Y"));
  Z = (postscript("Z"));
  a = (postscript("a"));
  b = (postscript("b"));
  c = (postscript("c"));
  d = (postscript("d"));
  e = (postscript("e"));
  f = (postscript("f"));
  g = (postscript("g"));
  h = (postscript("h"));
  i = (postscript("i"));
  j = (postscript("j"));
  k = (postscript("k"));
  l = (postscript("l"));
  msmall = (postscript("m"));
  n = (postscript("n"));
  o = (postscript("o"));
  p = (postscript("p"));
  q = (postscript("q"));
  r = (postscript("r"));
  s = (postscript("s"));
  t = (postscript("t"));
  u = (postscript("u"));
  v = (postscript("v"));
  w = (postscript("w"));
  x = (postscript("x"));
  y = (postscript("y"));
  z = (postscript("z"));
  gravecomb = (postscript("gravecomb"));
  acutecomb = (postscript("acutecomb"));
  circumflexcomb = (postscript("uni0302"));
  tildecomb = (postscript("tildecomb"));
  macroncomb = (postscript("uni0304"));
  diaeresiscomb = (postscript("uni0308"));
  caroncomb = (postscript("uni030C"));
  cedillacomb = (postscript("uni0327"));
  ringcomb = (postscript("uni030A"));
  Agrave = (postscript("Agrave"));
  Aacute = (postscript("Aacute"));
  Acircumflex = (postscript("Acircumflex"));
  Atilde = (postscript("Atilde"));
  Adieresis = (postscript("Adieresis"));
  Aring = (postscript("Aring"));
  AE = (postscript("AE"));
  Ccedilla = (postscript("Ccedilla"));
  Egrave = (postscript("Egrave"));
  Eacute = (postscript("Eacute"));
  Ecircumflex = (postscript("Ecircumflex"));
  Edieresis = (postscript("Edieresis"));
  Igrave = (postscript("Igrave"));
  Iacute = (postscript("Iacute"));
  Icircumflex = (postscript("Icircumflex"));
  Idieresis = (postscript("Idieresis"));
  Eth = (postscript("Eth"));
  Ntilde = (postscript("Ntilde"));
  Ograve = (postscript("Ograve"));
  Oacute = (postscript("Oacute"));
  Ocircumflex = (postscript("Ocircumflex"));
  Otilde = (postscript("Otilde"));
  Odieresis = (postscript("Odieresis"));
  Oslash = (postscript("Oslash"));
  Ugrave = (postscript("Ugrave"));
  Uacute = (postscript("Uacute"));
  Ucircumflex = (postscript("Ucircumflex"));
  Udieresis = (postscript("Udieresis"));
  Yacute = (postscript("Yacute"));
  Ydieresis = (postscript("Ydieresis"));
  OE = (postscript("OE"));
  Scaron = (postscript("Scaron"));
  Zcaron = (postscript("Zcaron"));
  agrave = (postscript("agrave"));
  aacute = (postscript("aacute"));
  acircumflex = (postscript("acircumflex"));
  atilde = (postscript("atilde"));
  adieresis = (postscript("adieresis"));
  aring = (postscript("aring"));
  ae = (postscript("ae"));
  ccedilla = (postscript("ccedilla"));
  egrave = (postscript("egrave"));
  eacute = (postscript("eacute"));
  ecircumflex = (postscript("ecircumflex"));
  edieresis = (postscript("edieresis"));
  igrave = (postscript("igrave"));
  iacute = (postscript("iacute"));
  icircumflex = (postscript("icircumflex"));
  idieresis = (postscript("idieresis"));
  eth = (postscript("eth"));
  ntilde = (postscript("ntilde"));
  ograve = (postscript("ograve"));
  oacute = (postscript("oacute"));
  ocircumflex = (postscript("ocircumflex"));
  otilde = (postscript("otilde"));
  odieresis = (postscript("odieresis"));
  oslash = (postscript("oslash"));
  ugrave = (postscript("ugrave"));
  uacute = (postscript("uacute"));
  ucircumflex = (postscript("ucircumflex"));
  udieresis = (postscript("udieresis"));
  yacute = (postscript("yacute"));
  ydieresis = (postscript("ydieresis"));
  oe = (postscript("oe"));
  scaron = (postscript("scaron"));
  zcaron = (postscript("zcaron"));
  germandbls = (postscript("germandbls"));
  longs = (postscript("longs"));
  germandblS = (postscript("uni1E9E"));
  rrotunda = (postscript("uniA75B"));
  f_f = (postscript("uniFB00"));
  f_i = (postscript("uniFB01"));
  f_l = (postscript("uniFB02"));
  f_f_i = (postscript("uniFB03"));
  f_f_l = (postscript("uniFB04"));
  longs_t = (postscript("uniFB05"));
  longs_c_h = (postscript("longs_c_h"));
  longs_s = (postscript("longs_s"));
  t_z = (postscript("t_z"));
  f_t = (postscript("f_t"));
  longs_longs = (postscript("longs_longs"));
  longs_i = (postscript("longs_i"));
  c_k = (postscript("c_k"));
  c_h = (postscript("c_h"));
  t_t = (postscript("t_t"));
  longs_longs_t = (postscript("longs_longs_t"));
  f_f_t = (postscript("f_f_t"));
  l_l = (postscript("l_l"));
  m_macroncomb = (postscript("m_uni0304"));
  n_macroncomb = (postscript("n_uni0304"));
  longs_j = (postscript("longs_j"));
  longs_k = (postscript("longs_k"));
  longs_h = (postscript("longs_h"));
  longs_longs_i = (postscript("longs_longs_i"));
  longs_l = (postscript("longs_l"));
  longs_longs_l = (postscript("longs_longs_l"));
  f_j = (postscript("f_j"));
  longs_longs_k = (postscript("longs_longs_k"));
  zwj = (postscript("afii301"));

  anyletter = ( A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, msmall, n, o, p, q, r, s, t, u, v, w, x, y, z, gravecomb, acutecomb, circumflexcomb, tildecomb, macroncomb, diaeresiscomb, caroncomb, cedillacomb, ringcomb, Agrave, Aacute, Acircumflex, Atilde, Adieresis, Aring, AE, Ccedilla, Egrave, Eacute, Ecircumflex, Edieresis, Igrave, Iacute, Icircumflex, Idieresis, Eth, Ntilde, Ograve, Oacute, Ocircumflex, Otilde, Odieresis, Oslash, Ugrave, Uacute, Ucircumflex, Udieresis, Yacute, Ydieresis, OE, Scaron, Zcaron, agrave, aacute, acircumflex, atilde, adieresis, aring, ae, ccedilla, egrave, eacute, ecircumflex, edieresis, igrave, iacute, icircumflex, idieresis, eth, ntilde, ograve, oacute, ocircumflex, otilde, odieresis, oslash, ugrave, uacute, ucircumflex, udieresis, yacute, ydieresis, oe, scaron, zcaron, germandbls, longs, germandblS, rrotunda, f_f, f_i, f_l, f_f_i, f_f_l, longs_t, longs_c_h, longs_s, t_z, f_t, longs_longs, longs_i, c_k, c_h, t_t, longs_longs_t, f_f_t, l_l, m_macroncomb, n_macroncomb, longs_j, longs_k, longs_h, longs_longs_i, longs_l, longs_longs_l, f_j, longs_longs_k );

  triggerRrotunda = ( b, d, o, p, v, w, odieresis, oacute, ocircumflex, otilde );

  zerowidth = ( zwj, gravecomb, acutecomb, circumflexcomb, tildecomb, macroncomb, diaeresiscomb, caroncomb, cedillacomb, ringcomb );

endtable;

#define uptothreeZerowidth [[[zerowidth]?zerowidth]?zerowidth]?

table(substitution)
  pass(1)

    if (autolongs)
      s > longs / _ anyletter ;
    endif;

    if (autoroundr)
      r > rrotunda / triggerRrotunda uptothreeZerowidth _ ;
    endif;

  endpass;
  pass(2)

    f f i > f_f_i:(1 2 3) _ _ ;
    f f l > f_f_l:(1 2 3) _ _ ;
    longs c h > longs_c_h:(1 2 3) _ _ ;
    longs longs t > longs_longs_t:(1 2 3) _ _ ;
    f f t > f_f_t:(1 2 3) _ _ ;
    longs longs i > longs_longs_i:(1 2 3) _ _ ;
    longs longs l > longs_longs_l:(1 2 3) _ _ ;
    longs longs k > longs_longs_k:(1 2 3) _ _ ;

    f f > f_f:(1 2) _ ;
    f i > f_i:(1 2) _ ;
    f l > f_l:(1 2) _ ;
    longs t > longs_t:(1 2) _ ;
    longs s > longs_s:(1 2) _ ;
    t z > t_z:(1 2) _ ;
    f t > f_t:(1 2) _ ;
    longs longs > longs_longs:(1 2) _ ;
    longs i > longs_i:(1 2) _ ;
    c k > c_k:(1 2) _ ;
    c h > c_h:(1 2) _ ;
    t t > t_t:(1 2) _ ;
    l l > l_l:(1 2) _ ;
    msmall macroncomb > m_macroncomb:(1 2) _ ;
    n macroncomb > n_macroncomb:(1 2) _ ;
    longs j > longs_j:(1 2) _ ;
    longs k > longs_k:(1 2) _ ;
    longs h > longs_h:(1 2) _ ;
    longs l > longs_l:(1 2) _ ;
    f j > f_j:(1 2) _ ;

// the purpose of the following ones is only to avoid the zwj from breaking up the ligatures

    f zwj f zwj i > f_f_i:(1 2 3 4 5) _ _ _ _ ;
    f zwj f zwj l > f_f_l:(1 2 3 4 5) _ _ _ _ ;
    longs zwj c zwj h > longs_c_h:(1 2 3 4 5) _ _ _ _ ;
    longs zwj longs zwj t > longs_longs_t:(1 2 3 4 5) _ _ _ _ ;
    f zwj f zwj t > f_f_t:(1 2 3 4 5) _ _ _ _ ;
    longs zwj longs zwj i > longs_longs_i:(1 2 3 4 5) _ _ _ _ ;
    longs zwj longs zwj l > longs_longs_l:(1 2 3 4 5) _ _ _ _ ;
    longs zwj longs zwj k > longs_longs_k:(1 2 3 4 5) _ _ _ _ ;

    a zwj e > ae:(1 2 3) _ _ ;
    A zwj E > AE:(1 2 3) _ _ ;
    c zwj h > c_h:(1 2 3) _ _ ;
    c zwj k > c_k:(1 2 3) _ _ ;
    f zwj f > f_f:(1 2 3) _ _ ;
    f zwj i > f_i:(1 2 3) _ _ ;
    f zwj j > f_j:(1 2 3) _ _ ;
    f zwj l > f_l:(1 2 3) _ _ ;
    f zwj t > f_t:(1 2 3) _ _ ;
    l zwj l > l_l:(1 2 3) _ _ ;
    longs zwj h > longs_h:(1 2 3) _ _ ;
    longs zwj i > longs_i:(1 2 3) _ _ ;
    longs zwj j > longs_j:(1 2 3) _ _ ;
    longs zwj k > longs_k:(1 2 3) _ _ ;
    longs zwj l > longs_l:(1 2 3) _ _ ;
    longs zwj longs > longs_longs:(1 2 3) _ _ ;
    longs zwj s > longs_s:(1 2 3) _ _ ;
    longs zwj t > longs_t:(1 2 3) _ _ ;
    longs zwj z > germandbls:(1 2 3) _ _ ;
    o zwj e > oe:(1 2 3) _ _ ;
    O zwj E > OE:(1 2 3) _ _ ;
    t zwj t > t_t:(1 2 3) _ _ ;
    t zwj z > t_z:(1 2 3) _ _ ;

    if (rareligatures)
      msmall msmall > m_macroncomb:(1 2) _;
      n n > n_macroncomb:(1 2) _;
    endif;

  endpass;

endtable;

endenvironment;
